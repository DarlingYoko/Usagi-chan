from calendar import c
from cgitb import text
from discord.ext import commands, tasks
from datetime import datetime
from time import mktime
from bin.functions import get_embed, get_member_by_all
from bin.checks import is_transformator_channel
from random import choice
import genshinstats as gs
from genshinstats import errors

instruction = '''
1. –ó–∞–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –•–æ—ë–ª–∞–±–∞ <https://www.hoyolab.com/home> –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —Ç–∞–º
2. –ù–∞–∂–∞—Ç—å Ctrl+Shift+I –∏–ª–∏ –ü–ö–ú -> –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–¥
3. –í—ã–±—Ä–∞—Ç—å –≤–∫–ª–∞–¥–∫—É –∫–æ–Ω—Å–æ–ª—å —Å–≤–µ—Ä—Ö—É
4. –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É document.cookie
5. –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏ –ø—Ä–∏—Å–ª–∞—Ç—å –º–Ω–µ –≤—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã, –ù—å—è!
'''

class Genshin(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.config = bot.config
        # self.claim_daily_reward.start()
        # self.resin_cup_alert.start()
        

    @commands.command(
        name = 'auth',
        description='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –•–æ—ë–ª–∞–±–∞',
        help='transformator',
        )
    @commands.check(is_transformator_channel)
    async def genshin_auth(self, ctx):
        dm_channel = ctx.author.dm_channel
        author_id = ctx.author.id
        if dm_channel == None:
            dm_channel = await ctx.author.create_dm()
        
        await dm_channel.send('–®–∞–≥–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:' + instruction)
        await ctx.reply('–û—Ç–ø—Ä–∞–≤–∏–ª–∞ —Ç–µ–±–µ –≤ –ª—Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.')

        def check(m):
            return m.author.id == author_id and m.channel == dm_channel

        msg = await self.bot.wait_for('message', check=check)
        msg = msg.content.replace('\'', '')
        
        for atr in msg.split('; '):
            if atr.startswith('ltoken'):
                ltoken = atr.split('ltoken=')[1]

            if atr.startswith('ltuid'):
                ltuid = atr.split('ltuid=')[1]

        await dm_channel.send('–°—É–ø–µ—Ä, –∞ —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –º–Ω–µ UID —Å–≤–æ–µ–≥–æ genshin –∞–∫–∫–∞—É–Ω—Ç–∞, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ —è –±—É–¥—É –±—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.')
        msg = await self.bot.wait_for('message', check=check)
        uid = msg.content

        try:
            gs.set_cookie(ltuid=ltuid, ltoken=ltoken)
            gs.get_notes(uid)
        except errors.NotLoggedIn:
            return await dm_channel.send('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø—Ä–æ–≤–µ—Ä—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ!')
        except errors.DataNotPublic:
            await dm_channel.send('–Ø —Ç–µ–±—è –∑–∞–ø–∏—à—É, –Ω–æ —Ç—ã –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ—Å—Ç–∞–≤—å –≥–∞–ª–æ—á–∫—É -> https://discord.com/channels/858053936313008129/873352458443845632/1000726302766137424')

        exists_user = self.bot.db.custom_command(f'select exists(select * from genshin_stats where id = {author_id});')[0][0]

        if not exists_user:
            response = self.bot.db.insert(
                'genshin_stats', 
                author_id,
                ltuid,
                uid,
                ltoken,
                False,
                False
            )
        else:
            return await dm_channel.send('–¢—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –±–∞–∫–∞!')
        if response:
            await dm_channel.send(f'–£—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∞ —Ç–µ–±—è!')
        else:
            await dm_channel.send(f'–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.')

    @commands.command(
        name = 'resin',
        aliases=['—Å–º–æ–ª–∞'],
        description='–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ —Å–º–æ–ª–µ',
        )
    async def genshin_resin(self, ctx, *, member: str = None):
        if member is not None:
            member = await get_member_by_all(self, member)
            if not member:
                return await ctx.reply('–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç!')
        else:
            member = ctx.author
        data = await self.get_genshin_data(ctx, member)
        if not data: return
        resin_timer = int(mktime(datetime.now().timetuple()) + int(data['until_resin_limit']))
        realm_timer = int(mktime(datetime.now().timetuple()) + int(data['until_realm_currency_limit']))
        fields = []
        fields.append({'name': f'–¢–≤–æ—è —Å–º–æ–ª–∞ - {data["resin"]} <:resin:1000684701331234857>', 'value': f'160 —Å–º–æ–ª—ã <t:{resin_timer}:R>', 'inline': False})
        fields.append({'name': f'–ú–æ–Ω–µ—Ç–æ–∫ –≤ —á–∞–π–Ω–∏–∫–µ - {data["realm_currency"]} ü´ñ', 'value': f'–ü–æ–ª–Ω–∞—è —á–∞—à–∞ <t:{realm_timer}:R>', 'inline': False})
        cookie = self.bot.db.custom_command(f'select uid from genshin_stats where id = {member.id};')[0]
        embed = get_embed(title = f'–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞. [{cookie[0]}]', fields = fields)
        msg = await ctx.reply(embed = embed)
        if ctx.guild is not None:
            await ctx.message.delete(delay = 10*60)
            await msg.delete(delay = 10*60)
    
    @commands.command(
        name = 'code',
        aliases=['–∫–æ–¥—ã'],
        description='–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –¥–ª—è –≥–µ–Ω—à–∏–Ω–∞',
        )
    async def genshin_code_activate(self, ctx, code_str: str):
        author_id = ctx.author.id
        exists_user = self.bot.db.custom_command(f'select exists(select * from genshin_stats where id = {author_id});')[0][0]
        if not exists_user:
            await ctx.reply('–¢—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –±–∞–∫–∞!')
            return 0
        cookie = self.bot.db.custom_command(f'select ltuid, uid, ltoken from genshin_stats where id = {author_id};')[0]
        ltuid = cookie[0]
        uid = cookie[1]
        ltoken = cookie[2]
        gs.set_cookie(ltuid=ltuid, ltoken=ltoken)
        gs.redeem_code(uid)
        await ctx.reply('–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∞ –∫–æ–¥!')

    @commands.command(
        name = 'notes',
        aliases=['–∑–∞–º–µ—Ç–∫–∏'],
        description='–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ç–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞',
        help='transformator',
        )
    @commands.check(is_transformator_channel)
    async def genshin_notes(self, ctx):
        data = await self.get_genshin_data(ctx, ctx.author)
        if not data: return
        resin_timer = int(mktime(datetime.now().timetuple()) + int(data['until_resin_limit']))
        realm_timer = int(mktime(datetime.now().timetuple()) + int(data['until_realm_currency_limit']))
        cookie = self.bot.db.custom_command(f'select daily_sub, resin_sub, uid from genshin_stats where id = {ctx.author.id};')[0]
        fields = []
        fields.append({'name': f'–¢–≤–æ—è —Å–º–æ–ª–∞ - {data["resin"]} <:resin:1000684701331234857>', 'value': f'160 —Å–º–æ–ª—ã <t:{resin_timer}:R>', 'inline': False})
        fields.append({'name': f'–ú–æ–Ω–µ—Ç–æ–∫ –≤ —á–∞–π–Ω–∏–∫–µ - {data["realm_currency"]} ü´ñ', 'value': f'–ü–æ–ª–Ω–∞—è —á–∞—à–∞ <t:{realm_timer}:R>', 'inline': False})
        fields.append({'name': f'–°–∫–æ–ª—å–∫–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–µ–π–ª–∏–∫–æ–≤ - {data["completed_commissions"]}', 'value': f'–ó–∞–±—Ä–∞–Ω–∞ –ª–∏ –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –¥–µ–π–ª–∏–∫–∏ - {"–î–∞" if data["claimed_commission_reward"] else "–ù–µ—Ç"}', 'inline': False})
        fields.append({'name': f'–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–±–æ—Ä –¥–µ–π–ª–∏ –æ—Ç–º–µ—Ç–æ–∫', 'value': f'{"–î–∞" if cookie[0] else "–ù–µ—Ç"}', 'inline': False})
        fields.append({'name': f'–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–ø —Å–º–æ–ª—ã', 'value': f'{"–î–∞" if cookie[1] else "–ù–µ—Ç"}', 'inline': False})
        fields.append({'name': f'–°–∫–æ–ª—å–∫–æ —Å–∫–∏–¥–æ–∫ –¥–ª—è –±–æ—Å—Å–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å', 'value': f'{data["remaining_boss_discounts"]}', 'inline': False})

        embed = get_embed(title = f'–ó–∞–º–µ—Ç–∫–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞ [{cookie[2]}]', fields = fields)
        await ctx.reply(embed = embed)

    @commands.command(
        name = 'drs',
        help='transformator',
        description='–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–±–æ—Ä –¥–µ–π–ª–∏ –æ—Ç–º–µ—Ç–æ–∫',
        )
    @commands.check(is_transformator_channel)
    async def genshin_daily_reward_claim_sub(self, ctx):
        author_id = ctx.author.id
        exists_user = self.bot.db.custom_command(f'select exists(select * from genshin_stats where id = {author_id});')[0][0]
        if not exists_user:
            return await ctx.reply('–¢—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –±–∞–∫–∞!')
        response = self.bot.db.update('genshin_stats', 'daily_sub', 'id', True, author_id)

        if response:
            await ctx.reply('–ó–∞–ø–∏—Å–∞–ª–∞ —Ç–µ–±—è –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä –¥–µ–π–ª–∏ –æ—Ç–º–µ—Ç–æ–∫.')
        else:
            await ctx.reply('–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Ç–µ–±—è, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.')

    @commands.command(
        name = 'undrs',
        help='transformator',
        description='–û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–±–æ—Ä–∞ –¥–µ–π–ª–∏ –æ—Ç–º–µ—Ç–æ–∫',
        )
    @commands.check(is_transformator_channel)
    async def genshin_daily_reward_claim_unsub(self, ctx):
        author_id = ctx.author.id
        exists_user = self.bot.db.custom_command(f'select exists(select * from genshin_stats where id = {author_id});')[0][0]
        if not exists_user:
            return await ctx.reply('–¢—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –±–∞–∫–∞!')
        response = self.bot.db.update('genshin_stats', 'daily_sub', 'id', False, author_id)

        if response:
            await ctx.reply('–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∞ —Ç–µ–±—è –æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ –¥–µ–π–ª–∏ –æ—Ç–º–µ—Ç–æ–∫.')
        else:
            await ctx.reply('–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø–∏—Å–∞—Ç—å —Ç–µ–±—è, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.')

    @commands.command(
        name = 'crs',
        help='transformator',
        description='–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∞–ª—ë—Ä—Ç –∫–∞–ø–∞ —Å–º–æ–ª—ã.',
        )
    @commands.check(is_transformator_channel)
    async def genshin_cup_resin_sub(self, ctx):
        author_id = ctx.author.id
        exists_user = self.bot.db.custom_command(f'select exists(select * from genshin_stats where id = {author_id});')[0][0]
        if not exists_user:
            return await ctx.reply('–¢—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –±–∞–∫–∞!')
        response = self.bot.db.update('genshin_stats', 'resin_sub', 'id', True, author_id)

        if response:
            await ctx.reply('–ó–∞–ø–∏—Å–∞–ª–∞ —Ç–µ–±—è –Ω–∞ –∞–ª—ë—Ä—Ç –∫–∞–ø–∞ —Å–º–æ–ª—ã.')
        else:
            await ctx.reply('–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Ç–µ–±—è, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.')

    @commands.command(
        name = 'uncrs',
        help='transformator',
        description='–û—Ç–ø–∏—Å–∫–∞ –æ—Ç –∞–ª—ë—Ä—Ç–∞ –∫–∞–ø–∞ —Å–º–æ–ª—ã.',
        )
    @commands.check(is_transformator_channel)
    async def genshin_cup_resin_unsub(self, ctx):
        author_id = ctx.author.id
        exists_user = self.bot.db.custom_command(f'select exists(select * from genshin_stats where id = {author_id});')[0][0]
        if not exists_user:
            return await ctx.reply('–¢—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –±–∞–∫–∞!')
        response = self.bot.db.update('genshin_stats', 'resin_sub', 'id', False, author_id)

        if response:
            await ctx.reply('–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∞ —Ç–µ–±—è –æ—Ç –∞–ª—ë—Ä—Ç–∞ –∫–∞–ø–∞ —Å–º–æ–ª—ã.')
        else:
            await ctx.reply('–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø–∏—Å–∞—Ç—å —Ç–µ–±—è, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.')

    @commands.command(
        name = 'ss',
        aliases=['–ø–æ–¥–ø–∏—Å–∫–∏'],
        description='–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–æ–∫.',
        )
    async def genshin_sub_status(self, ctx):
        author_id = ctx.author.id
        exists_user = self.bot.db.custom_command(f'select exists(select * from genshin_stats where id = {author_id});')[0][0]
        if not exists_user:
            return await ctx.reply('–¢—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –±–∞–∫–∞!')
        cookie = self.bot.db.custom_command(f'select daily_sub, resin_sub from genshin_stats where id = {author_id};')[0]
        if cookie:
            fields = []
            fields.append({'name': f'–°–±–æ—Ä –¥–µ–π–ª–∏ –æ—Ç–º–µ—Ç–æ–∫', 'value': f'{"–î–∞" if cookie[0] else "–ù–µ—Ç"}', 'inline': False})
            fields.append({'name': f'–ö–∞–ø —Å–º–æ–ª—ã', 'value': f'{"–î–∞" if cookie[1] else "–ù–µ—Ç"}', 'inline': False})

            embed = get_embed(title = '–¢–≤–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏', fields = fields)
            msg = await ctx.reply(embed = embed)
            if ctx.guild is not None:
                await ctx.message.delete(delay = 10*60)
                await msg.delete(delay = 10*60)
        else:
            await ctx.reply('–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–≤–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.')

    @tasks.loop(minutes=30)
    async def claim_daily_reward(self):
        if datetime.now().hour in [15,16,17]:
            cookies = self.bot.db.custom_command(f'select ltuid, uid, ltoken from genshin_stats where daily_sub = {True};')
            reward_claimed = False
            for cookie in cookies:
                try:
                    gs.set_cookie(ltuid=cookie[0], ltoken=cookie[2])
                    reward = gs.claim_daily_reward(cookie[1])
                    if reward:
                        reward_claimed = True
                    print(reward)
                except Exception as e:
                    print(f'resin cup error with {cookie[1]}')
                    print(e)
            if reward_claimed:
                channel = await self.bot.fetch_channel(self.config['channel']['main'])
                await channel.send('–°–æ–±—Ä–∞–ª–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç–º–µ—Ç–∫–∏, –ù—å—è!')


    @claim_daily_reward.before_loop
    async def before_claim_daily_reward(self):
        print('waiting claim_daily_reward')
        await self.bot.wait_until_ready()

    @tasks.loop(minutes=30)
    async def resin_cup_alert(self):

        cookies = self.bot.db.custom_command(f'select ltuid, uid, ltoken, resin_alerted, id from genshin_stats where resin_sub = {True};')
        channel = await self.bot.fetch_channel(self.config['channel']['transformator'])
        for cookie in cookies:
            ltuid = cookie[0]
            uid = cookie[1]
            ltoken = cookie[2]
            user_id = cookie[4]
            try:
                gs.set_cookie(ltuid=ltuid, ltoken=ltoken)
                data = gs.get_notes(uid)
                if data['resin'] >= 150 and not cookie[3]:
                    response = self.bot.db.update('genshin_stats', 'resin_alerted', 'id', True, user_id)
                    if response:
                        texts = [
                            f'<@{user_id}>, –í–∏–∂—É —É —Ç–µ–±—è —É–∂–µ {data["resin"]} —Å–º–æ–ª—ã, –≤—Ä–µ–º—è —Å–ª–∏–≤–∞—Ç—å? <:blushDetective:860444156386869288>',
                            f'<@{user_id}>, –í–æ—Ç-–≤–æ—Ç –ø–µ—Ä–µ–∫–∞–ø, —É–∂–µ {data["resin"]} —Å–º–æ–ª—ã, –ø–æ–π–¥–µ–º —Å–ª–∏–≤–∞—Ç—å? :3',
                            f'<@{user_id}>, –ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê, –°–ö–û–†–ï–ï–ï, –£–ñ–ï {data["resin"]} –°–ú–û–õ–´ <a:dinkDonk:865127621112102953> <a:dinkDonk:865127621112102953> <a:dinkDonk:865127621112102953>',
                            # f'<@{user_id}>, ',
                            # f'<@{user_id}>, ',
                        ]
                        await channel.send(choice(texts))
                    else:
                        print(f'error {response}, {user_id} resin alert')
                
                if data['resin'] < 150 and cookie[3]:
                    response = self.bot.db.update('genshin_stats', 'resin_alerted', 'id', False, user_id)
                    if not response:
                        print(f'error {response}, {user_id} resin alert')
            except Exception as e:
                print(f'resin cup error with {user_id}')
                print(e)
            
            


    @resin_cup_alert.before_loop
    async def before_resin_cup_alert(self):
        print('waiting resin_cup_alert')
        await self.bot.wait_until_ready()


    async def get_genshin_data(self, ctx, author):
        author_id = author.id
        exists_user = self.bot.db.custom_command(f'select exists(select * from genshin_stats where id = {author_id});')[0][0]
        if not exists_user:
            if author_id != ctx.author.id:
                await ctx.reply('–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –±–∞–∫–∞!')
            else:
                await ctx.reply('–¢—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –±–∞–∫–∞!')
            return 0
        cookie = self.bot.db.custom_command(f'select ltuid, uid, ltoken from genshin_stats where id = {author_id};')[0]
        ltuid = cookie[0]
        uid = cookie[1]
        ltoken = cookie[2]
        gs.set_cookie(ltuid=ltuid, ltoken=ltoken)
        stats = gs.get_notes(uid)
        # gs.genshinstats.session.close()
        return stats

    async def cog_command_error(self, ctx: commands.Context, error: commands.CommandError):
        if isinstance(error, commands.CheckFailure):
            channel = self.config['channel']['transformator']
            await ctx.send(f'–ù–∏–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É —Ç—É—Ç—å. –¢–µ–±–µ —Å—é–¥–∞ <#{channel}>')


    


def setup(bot):
    # pass
    bot.add_cog(Genshin(bot))
