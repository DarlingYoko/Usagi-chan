import src.config as config
from src.functions import wrongMessage, getCurrentTime, createEmbed
import pickle
from datetime import datetime

async def createRequest(data, db):

    if data['message'].channel.id != config.requestChannel:
        title = '–í —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!'
        description = '–í–∞–º —Å—é–¥–∞ üëâ <#{0}>'.format(config.requestChannel)
        await wrongMessage(data = data, title = title, description = description)
        return


    msg = data['content'].split('/')
    messageChannel = data['client'].get_channel(config.requestChannel)
    counter = {2: '2Ô∏è‚É£', 3: '3Ô∏è‚É£', 4: '4Ô∏è‚É£'}
    serversId = {6: '–ê–º–µ—Ä–∏–∫–∞', 7: '–ï–≤—Ä–æ–ø–∞', 8: '–ê–∑–∏—è', 9: '–¢–∞–π–≤–∞–Ω—å'}

    if len(msg) < 4 or len(msg) > 4:
        title = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞. –ü—Ä–æ—á—Ç–∏—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!'
        description = ''':round_pushpin: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `!—Å–æ–∑–¥–∞—Ç—å <world>/<id>/<slots>/<message>`
                         :round_pushpin: –ü—Ä–∏–º–µ—Ä: `!—Å–æ–∑–¥–∞—Ç—å 7/7000563212/3/–§–∞—Ä–º–∏–º —Ä–æ—Ñ–ª–æ—á—É—Ä–ª–æ–≤`
                         **–ü–†–ò–ú–ï–ß–ê–ù–ò–ï**: –í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∏ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã `/`'''
        await wrongMessage(data = data, title = title, description = description, delay = 60)
        return

    try:
        lvlWorld = int(msg[0])
        if lvlWorld > 8 or lvlWorld < 1:
            title = '–ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –º–∏—Ä–∞!'
            description = '**–£—Ä–æ–≤–µ–Ω—å –º–∏—Ä–∞** –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ `8` –∏–ª–∏ –º–µ–Ω—å—à–µ `1`'
            await wrongMessage(data = data, title = title, description = description)
            return
    except:
        title = '–ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –º–∏—Ä–∞!'
        description = '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç **—É—Ä–æ–≤–Ω—è –º–∏—Ä–∞**, –æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –æ–¥–Ω–æ–π —Ü–∏—Ñ—Ä—ã –æ—Ç `1` –¥–æ `8`'
        await wrongMessage(data = data, title = title, description = description)
        return


    try:
        length = len(msg[1])
        UID = int(msg[1])
        if length > 9 or length < 9:
            title = '–ù–µ–≤–µ—Ä–Ω—ã–π UID!'
            description = '**UID** –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±–æ–ª—å—à–µ `9` —Ü–∏—Ñ—Ä'
            await wrongMessage(data = data, title = title, description = description)
            return

        firstSymbol = int(msg[1][0])
        if firstSymbol not in serversId.keys():
            title = '–ù–µ–≤–µ—Ä–Ω—ã–π UID!'
            description = '–°–µ—Ä–≤–µ—Ä–∞ —Å —Ç–∞–∫–∏–º **UID** –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ **UID**.'
            await wrongMessage(data = data, title = title, description = description)
            return

        server = serversId[firstSymbol]

    except:
        title = '–ù–µ–≤–µ—Ä–Ω—ã–π UID!'
        description = '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç **UID**, –æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –¥–µ–≤—è—Ç–∏ —Ü–∏—Ñ—Ä'
        await wrongMessage(data = data, title = title, description = description)
        return

    try:
        numberOfSlots = int(msg[2])
        if numberOfSlots > 3 or numberOfSlots < 1:
            title = '–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤!'
            description = '–ò—Ö –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –±–æ–ª—å—à–µ `3` –∏ –Ω–µ –º–µ–Ω—å—à–µ `1`'
            await wrongMessage(data = data, title = title, description = description)
            return
    except:
        title = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–ª–æ—Ç–æ–≤!'
        description = '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç **—Å–ª–æ—Ç–∞**, –æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –æ–¥–Ω–æ–π —Ü–∏—Ñ—Ä—ã –æ—Ç `1` –¥–æ `3`'
        await wrongMessage(data = data, title = title, description = description)
        return

    text = msg[3]
    slots = '***1) –°–ª–æ—Ç:** <@{0}>*\n'.format(data['message'].author.id)



    for i in range(numberOfSlots):
        slots += '***{0}) –°–ª–æ—Ç:** –ü—É—Å—Ç–æ*\n'.format(i + 2)

    authorName = '{0} —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É.'.format(data['message'].author.display_name)
    authorIconURL = data['message'].author.avatar_url
    description = ':park: **–ú–∏—Ä:** {0} —É—Ä–æ–≤–Ω—è\n:label: **UID:** {1}\n:map: **–°–µ—Ä–≤–µ—Ä:** {4}\n:busts_in_silhouette: **–°–ª–æ—Ç—ã:**\n{3}:pencil: **–û–ø–∏—Å–∞–Ω–∏–µ:** {2}'.format(lvlWorld, UID, text, slots, server)
    footer = '–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ {0} –ø–æ –ú–°–ö'.format(getCurrentTime())
    time = datetime.now()

    embed = createEmbed(description = description, thumbnail = config.requestThumbnail, footer = footer, authorName = authorName, authorIconURL = authorIconURL)
    timeMsg = await messageChannel.send('<@&{}>'.format(config.requestRoleID), embed = embed)

    await timeMsg.add_reaction('üîí')
    for i in range(numberOfSlots):
        await timeMsg.add_reaction(counter[i + 2])

    try:
        await timeMsg.pin()
    except:
        pass



    userId = data['message'].author.id
    msgIds = db.get(userId = userId)
    if msgIds:
        msgIds = eval(msgIds)
        msgIds.append(timeMsg.id)
        db.update(userId = userId, messageId = msgIds)

    else:
        msgIds = [timeMsg.id]
        db.insert(userId = userId, messageId = msgIds)

    db.insertEmoji(userId = timeMsg.id, messageId = {}, time = time)
